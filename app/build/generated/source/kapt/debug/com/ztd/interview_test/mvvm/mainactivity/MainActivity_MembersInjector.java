// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.mvvm.mainactivity;

import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import javax.inject.Provider;

public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<ViewModelProvider.Factory> mainViewModelFactoryProvider;

  private final Provider<DispatchingAndroidInjector<Fragment>>
      fragmentDispatchingAndroidInjectorProvider;

  public MainActivity_MembersInjector(
      Provider<ViewModelProvider.Factory> mainViewModelFactoryProvider,
      Provider<DispatchingAndroidInjector<Fragment>> fragmentDispatchingAndroidInjectorProvider) {
    this.mainViewModelFactoryProvider = mainViewModelFactoryProvider;
    this.fragmentDispatchingAndroidInjectorProvider = fragmentDispatchingAndroidInjectorProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<ViewModelProvider.Factory> mainViewModelFactoryProvider,
      Provider<DispatchingAndroidInjector<Fragment>> fragmentDispatchingAndroidInjectorProvider) {
    return new MainActivity_MembersInjector(
        mainViewModelFactoryProvider, fragmentDispatchingAndroidInjectorProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectMainViewModelFactory(instance, mainViewModelFactoryProvider.get());
    injectFragmentDispatchingAndroidInjector(
        instance, fragmentDispatchingAndroidInjectorProvider.get());
  }

  public static void injectMainViewModelFactory(
      MainActivity instance, ViewModelProvider.Factory mainViewModelFactory) {
    instance.mainViewModelFactory = mainViewModelFactory;
  }

  public static void injectFragmentDispatchingAndroidInjector(
      MainActivity instance,
      DispatchingAndroidInjector<Fragment> fragmentDispatchingAndroidInjector) {
    instance.fragmentDispatchingAndroidInjector = fragmentDispatchingAndroidInjector;
  }
}
