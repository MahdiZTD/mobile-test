// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.mvvm.homefragment;

import com.ztd.interview_test.infrustructure.DataManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class HomeModule_ProvideViewModelFactory implements Factory<HomeViewModel> {
  private final HomeModule module;

  private final Provider<DataManager> dataManagerProvider;

  public HomeModule_ProvideViewModelFactory(
      HomeModule module, Provider<DataManager> dataManagerProvider) {
    this.module = module;
    this.dataManagerProvider = dataManagerProvider;
  }

  @Override
  public HomeViewModel get() {
    return provideInstance(module, dataManagerProvider);
  }

  public static HomeViewModel provideInstance(
      HomeModule module, Provider<DataManager> dataManagerProvider) {
    return proxyProvideViewModel(module, dataManagerProvider.get());
  }

  public static HomeModule_ProvideViewModelFactory create(
      HomeModule module, Provider<DataManager> dataManagerProvider) {
    return new HomeModule_ProvideViewModelFactory(module, dataManagerProvider);
  }

  public static HomeViewModel proxyProvideViewModel(HomeModule instance, DataManager dataManager) {
    return Preconditions.checkNotNull(
        instance.provideViewModel(dataManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
