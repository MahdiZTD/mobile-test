// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.infrustructure.di;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import com.google.gson.Gson;
import com.ztd.interview_test.infrustructure.AppDataManager;
import com.ztd.interview_test.infrustructure.DataManager;
import com.ztd.interview_test.infrustructure.data.AssetHelper;
import com.ztd.interview_test.infrustructure.data.AssetHelperImp_Factory;
import com.ztd.interview_test.mvvm.InterviewApplication;
import com.ztd.interview_test.mvvm.InterviewApplication_MembersInjector;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailFragment;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailFragment_MembersInjector;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailModule;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailModule_ProvideCategoryAdapterFactory;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailModule_ProvideDataManagerFactory;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailModule_ProvideViewModelFactory;
import com.ztd.interview_test.mvvm.categorydetailfragment.CategoryDetailViewModel;
import com.ztd.interview_test.mvvm.detailfragment.DetailFragment;
import com.ztd.interview_test.mvvm.detailfragment.DetailFragment_MembersInjector;
import com.ztd.interview_test.mvvm.detailfragment.DetailModule;
import com.ztd.interview_test.mvvm.detailfragment.DetailModule_ProvideContactAdapterFactory;
import com.ztd.interview_test.mvvm.detailfragment.DetailModule_ProvideDataManagerFactory;
import com.ztd.interview_test.mvvm.detailfragment.DetailModule_ProvideViewModelFactory;
import com.ztd.interview_test.mvvm.detailfragment.DetailViewModel;
import com.ztd.interview_test.mvvm.homefragment.HomeFragment;
import com.ztd.interview_test.mvvm.homefragment.HomeFragment_MembersInjector;
import com.ztd.interview_test.mvvm.homefragment.HomeModule;
import com.ztd.interview_test.mvvm.homefragment.HomeModule_ProvideCategoryAdapterFactory;
import com.ztd.interview_test.mvvm.homefragment.HomeModule_ProvideDataManagerFactory;
import com.ztd.interview_test.mvvm.homefragment.HomeModule_ProvideViewModelFactory;
import com.ztd.interview_test.mvvm.homefragment.HomeViewModel;
import com.ztd.interview_test.mvvm.mainactivity.MainActivity;
import com.ztd.interview_test.mvvm.mainactivity.MainActivity_MembersInjector;
import com.ztd.interview_test.mvvm.mainactivity.MainModule;
import com.ztd.interview_test.mvvm.mainactivity.MainModule_ProvideMainViewModelFactory;
import com.ztd.interview_test.mvvm.mainactivity.MainModule_ProvideViewModelFactory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_ProvideHomeFragmentFactory.HomeFragmentSubcomponent.Builder>
      homeFragmentSubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_ProvideCategoryDetailFactory.CategoryDetailFragmentSubcomponent.Builder>
      categoryDetailFragmentSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_ProvideDetailFactory.DetailFragmentSubcomponent.Builder>
      detailFragmentSubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private AssetHelperImp_Factory assetHelperImpProvider;

  private Provider<AssetHelper> provideAssetHelperProvider;

  private Provider<Gson> provideGsonProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.homeFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ProvideHomeFragmentFactory.HomeFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ProvideHomeFragmentFactory.HomeFragmentSubcomponent.Builder get() {
            return new HomeFragmentSubcomponentBuilder();
          }
        };
    this.categoryDetailFragmentSubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ProvideCategoryDetailFactory.CategoryDetailFragmentSubcomponent
                .Builder>() {
          @Override
          public ActivityBuilder_ProvideCategoryDetailFactory.CategoryDetailFragmentSubcomponent
                  .Builder
              get() {
            return new CategoryDetailFragmentSubcomponentBuilder();
          }
        };
    this.detailFragmentSubcomponentBuilderProvider =
        new Provider<ActivityBuilder_ProvideDetailFactory.DetailFragmentSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ProvideDetailFactory.DetailFragmentSubcomponent.Builder get() {
            return new DetailFragmentSubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContextProvider =
        DoubleCheck.provider(
            AppModule_ProvideContextFactory.create(builder.appModule, applicationProvider));
    this.assetHelperImpProvider = AssetHelperImp_Factory.create(provideContextProvider);
    this.provideAssetHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvideAssetHelperFactory.create(builder.appModule, assetHelperImpProvider));
    this.provideGsonProvider =
        DoubleCheck.provider(AppModule_ProvideGsonFactory.create(builder.appModule));
  }

  @Override
  public void inject(InterviewApplication app) {
    injectInterviewApplication(app);
  }

  private InterviewApplication injectInterviewApplication(InterviewApplication instance) {
    InterviewApplication_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_BindMainActivity.MainActivitySubcomponent.Builder {
    private MainModule mainModule;

    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_BindMainActivity.MainActivitySubcomponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_BindMainActivity.MainActivitySubcomponent {
    private MainModule mainModule;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private ViewModelProvider.Factory getFactory() {
      return MainModule_ProvideViewModelFactory.proxyProvideViewModel(
          mainModule, MainModule_ProvideMainViewModelFactory.proxyProvideMainViewModel(mainModule));
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(3)
          .put(
              HomeFragment.class,
              (Provider) DaggerAppComponent.this.homeFragmentSubcomponentBuilderProvider)
          .put(
              CategoryDetailFragment.class,
              (Provider) DaggerAppComponent.this.categoryDetailFragmentSubcomponentBuilderProvider)
          .put(
              DetailFragment.class,
              (Provider) DaggerAppComponent.this.detailFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.mainModule = builder.mainModule;
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectMainViewModelFactory(instance, getFactory());
      MainActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class HomeFragmentSubcomponentBuilder
      extends ActivityBuilder_ProvideHomeFragmentFactory.HomeFragmentSubcomponent.Builder {
    private HomeModule homeModule;

    private HomeFragment seedInstance;

    @Override
    public ActivityBuilder_ProvideHomeFragmentFactory.HomeFragmentSubcomponent build() {
      if (homeModule == null) {
        this.homeModule = new HomeModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(HomeFragment.class.getCanonicalName() + " must be set");
      }
      return new HomeFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HomeFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HomeFragmentSubcomponentImpl
      implements ActivityBuilder_ProvideHomeFragmentFactory.HomeFragmentSubcomponent {
    private HomeModule homeModule;

    private HomeFragmentSubcomponentImpl(HomeFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private AppDataManager getAppDataManager() {
      return new AppDataManager(
          DaggerAppComponent.this.provideAssetHelperProvider.get(),
          DaggerAppComponent.this.provideGsonProvider.get());
    }

    private DataManager getDataManager() {
      return HomeModule_ProvideDataManagerFactory.proxyProvideDataManager(
          homeModule, getAppDataManager());
    }

    private HomeViewModel getHomeViewModel() {
      return HomeModule_ProvideViewModelFactory.proxyProvideViewModel(homeModule, getDataManager());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HomeFragmentSubcomponentBuilder builder) {
      this.homeModule = builder.homeModule;
    }

    @Override
    public void inject(HomeFragment arg0) {
      injectHomeFragment(arg0);
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      HomeFragment_MembersInjector.injectHomeViewModel(instance, getHomeViewModel());
      HomeFragment_MembersInjector.injectCategoryAdapter(
          instance,
          HomeModule_ProvideCategoryAdapterFactory.proxyProvideCategoryAdapter(homeModule));
      return instance;
    }
  }

  private final class CategoryDetailFragmentSubcomponentBuilder
      extends ActivityBuilder_ProvideCategoryDetailFactory.CategoryDetailFragmentSubcomponent
          .Builder {
    private CategoryDetailModule categoryDetailModule;

    private CategoryDetailFragment seedInstance;

    @Override
    public ActivityBuilder_ProvideCategoryDetailFactory.CategoryDetailFragmentSubcomponent build() {
      if (categoryDetailModule == null) {
        this.categoryDetailModule = new CategoryDetailModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            CategoryDetailFragment.class.getCanonicalName() + " must be set");
      }
      return new CategoryDetailFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CategoryDetailFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CategoryDetailFragmentSubcomponentImpl
      implements ActivityBuilder_ProvideCategoryDetailFactory.CategoryDetailFragmentSubcomponent {
    private CategoryDetailModule categoryDetailModule;

    private CategoryDetailFragmentSubcomponentImpl(
        CategoryDetailFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private AppDataManager getAppDataManager() {
      return new AppDataManager(
          DaggerAppComponent.this.provideAssetHelperProvider.get(),
          DaggerAppComponent.this.provideGsonProvider.get());
    }

    private DataManager getDataManager() {
      return CategoryDetailModule_ProvideDataManagerFactory.proxyProvideDataManager(
          categoryDetailModule, getAppDataManager());
    }

    private CategoryDetailViewModel getCategoryDetailViewModel() {
      return CategoryDetailModule_ProvideViewModelFactory.proxyProvideViewModel(
          categoryDetailModule, getDataManager());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CategoryDetailFragmentSubcomponentBuilder builder) {
      this.categoryDetailModule = builder.categoryDetailModule;
    }

    @Override
    public void inject(CategoryDetailFragment arg0) {
      injectCategoryDetailFragment(arg0);
    }

    private CategoryDetailFragment injectCategoryDetailFragment(CategoryDetailFragment instance) {
      CategoryDetailFragment_MembersInjector.injectCategoryDetailViewModel(
          instance, getCategoryDetailViewModel());
      CategoryDetailFragment_MembersInjector.injectCategoryDetailAdapter(
          instance,
          CategoryDetailModule_ProvideCategoryAdapterFactory.proxyProvideCategoryAdapter(
              categoryDetailModule));
      return instance;
    }
  }

  private final class DetailFragmentSubcomponentBuilder
      extends ActivityBuilder_ProvideDetailFactory.DetailFragmentSubcomponent.Builder {
    private DetailModule detailModule;

    private DetailFragment seedInstance;

    @Override
    public ActivityBuilder_ProvideDetailFactory.DetailFragmentSubcomponent build() {
      if (detailModule == null) {
        this.detailModule = new DetailModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(DetailFragment.class.getCanonicalName() + " must be set");
      }
      return new DetailFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DetailFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DetailFragmentSubcomponentImpl
      implements ActivityBuilder_ProvideDetailFactory.DetailFragmentSubcomponent {
    private DetailModule detailModule;

    private DetailFragmentSubcomponentImpl(DetailFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private AppDataManager getAppDataManager() {
      return new AppDataManager(
          DaggerAppComponent.this.provideAssetHelperProvider.get(),
          DaggerAppComponent.this.provideGsonProvider.get());
    }

    private DataManager getDataManager() {
      return DetailModule_ProvideDataManagerFactory.proxyProvideDataManager(
          detailModule, getAppDataManager());
    }

    private DetailViewModel getDetailViewModel() {
      return DetailModule_ProvideViewModelFactory.proxyProvideViewModel(
          detailModule, getDataManager());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DetailFragmentSubcomponentBuilder builder) {
      this.detailModule = builder.detailModule;
    }

    @Override
    public void inject(DetailFragment arg0) {
      injectDetailFragment(arg0);
    }

    private DetailFragment injectDetailFragment(DetailFragment instance) {
      DetailFragment_MembersInjector.injectDetailViewModel(instance, getDetailViewModel());
      DetailFragment_MembersInjector.injectContactAdapter(
          instance,
          DetailModule_ProvideContactAdapterFactory.proxyProvideContactAdapter(detailModule));
      return instance;
    }
  }
}
