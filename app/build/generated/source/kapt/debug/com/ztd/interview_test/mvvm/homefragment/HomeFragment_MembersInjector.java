// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.mvvm.homefragment;

import com.ztd.interview_test.mvvm.homefragment.adapter.CategoryAdapter;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class HomeFragment_MembersInjector implements MembersInjector<HomeFragment> {
  private final Provider<HomeViewModel> homeViewModelProvider;

  private final Provider<CategoryAdapter> categoryAdapterProvider;

  public HomeFragment_MembersInjector(
      Provider<HomeViewModel> homeViewModelProvider,
      Provider<CategoryAdapter> categoryAdapterProvider) {
    this.homeViewModelProvider = homeViewModelProvider;
    this.categoryAdapterProvider = categoryAdapterProvider;
  }

  public static MembersInjector<HomeFragment> create(
      Provider<HomeViewModel> homeViewModelProvider,
      Provider<CategoryAdapter> categoryAdapterProvider) {
    return new HomeFragment_MembersInjector(homeViewModelProvider, categoryAdapterProvider);
  }

  @Override
  public void injectMembers(HomeFragment instance) {
    injectHomeViewModel(instance, homeViewModelProvider.get());
    injectCategoryAdapter(instance, categoryAdapterProvider.get());
  }

  public static void injectHomeViewModel(HomeFragment instance, HomeViewModel homeViewModel) {
    instance.homeViewModel = homeViewModel;
  }

  public static void injectCategoryAdapter(HomeFragment instance, CategoryAdapter categoryAdapter) {
    instance.categoryAdapter = categoryAdapter;
  }
}
