// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.mvvm.homefragment;

import com.ztd.interview_test.infrustructure.DataManager;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<DataManager> dataManagerProvider;

  public HomeViewModel_Factory(Provider<DataManager> dataManagerProvider) {
    this.dataManagerProvider = dataManagerProvider;
  }

  @Override
  public HomeViewModel get() {
    return provideInstance(dataManagerProvider);
  }

  public static HomeViewModel provideInstance(Provider<DataManager> dataManagerProvider) {
    return new HomeViewModel(dataManagerProvider.get());
  }

  public static HomeViewModel_Factory create(Provider<DataManager> dataManagerProvider) {
    return new HomeViewModel_Factory(dataManagerProvider);
  }

  public static HomeViewModel newHomeViewModel(DataManager dataManager) {
    return new HomeViewModel(dataManager);
  }
}
