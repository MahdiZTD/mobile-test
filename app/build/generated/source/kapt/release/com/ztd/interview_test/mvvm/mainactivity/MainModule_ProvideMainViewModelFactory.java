// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.mvvm.mainactivity;

import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class MainModule_ProvideMainViewModelFactory implements Factory<MainViewModel> {
  private final MainModule module;

  public MainModule_ProvideMainViewModelFactory(MainModule module) {
    this.module = module;
  }

  @Override
  public MainViewModel get() {
    return provideInstance(module);
  }

  public static MainViewModel provideInstance(MainModule module) {
    return proxyProvideMainViewModel(module);
  }

  public static MainModule_ProvideMainViewModelFactory create(MainModule module) {
    return new MainModule_ProvideMainViewModelFactory(module);
  }

  public static MainViewModel proxyProvideMainViewModel(MainModule instance) {
    return Preconditions.checkNotNull(
        instance.provideMainViewModel(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
