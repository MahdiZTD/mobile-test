// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.infrustructure.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

public final class AppModule_ProvideCompositeDisposable$app_releaseFactory
    implements Factory<CompositeDisposable> {
  private final AppModule module;

  public AppModule_ProvideCompositeDisposable$app_releaseFactory(AppModule module) {
    this.module = module;
  }

  @Override
  public CompositeDisposable get() {
    return provideInstance(module);
  }

  public static CompositeDisposable provideInstance(AppModule module) {
    return proxyProvideCompositeDisposable$app_release(module);
  }

  public static AppModule_ProvideCompositeDisposable$app_releaseFactory create(AppModule module) {
    return new AppModule_ProvideCompositeDisposable$app_releaseFactory(module);
  }

  public static CompositeDisposable proxyProvideCompositeDisposable$app_release(
      AppModule instance) {
    return Preconditions.checkNotNull(
        instance.provideCompositeDisposable$app_release(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
