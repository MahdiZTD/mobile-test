// Generated by Dagger (https://google.github.io/dagger).
package com.ztd.interview_test.mvvm.mainactivity;

import androidx.lifecycle.ViewModelProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainModule_ProvideViewModelFactory
    implements Factory<ViewModelProvider.Factory> {
  private final MainModule module;

  private final Provider<MainViewModel> mainViewModelProvider;

  public MainModule_ProvideViewModelFactory(
      MainModule module, Provider<MainViewModel> mainViewModelProvider) {
    this.module = module;
    this.mainViewModelProvider = mainViewModelProvider;
  }

  @Override
  public ViewModelProvider.Factory get() {
    return provideInstance(module, mainViewModelProvider);
  }

  public static ViewModelProvider.Factory provideInstance(
      MainModule module, Provider<MainViewModel> mainViewModelProvider) {
    return proxyProvideViewModel(module, mainViewModelProvider.get());
  }

  public static MainModule_ProvideViewModelFactory create(
      MainModule module, Provider<MainViewModel> mainViewModelProvider) {
    return new MainModule_ProvideViewModelFactory(module, mainViewModelProvider);
  }

  public static ViewModelProvider.Factory proxyProvideViewModel(
      MainModule instance, MainViewModel mainViewModel) {
    return Preconditions.checkNotNull(
        instance.provideViewModel(mainViewModel),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
